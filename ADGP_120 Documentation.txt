William Monter               						ADGP_120 
wam 116								Assessment_6
Due Date: 05/5/2016 12:00am


I Requirements Documentation

You are tasked with implementing AI behaviors and pathfinding within 
the python script in a sandboxed 2D environment. You must be able to 
deploy/place AI entities within your 2D environment and assign them
specific behaviors or waypoints that they should navigate to. 
You should also enable the ability to place obstacles (or disable 
areas) in your environment to change the path that your entities must navigate. 

I.1. Description of the Problem
Could not meet full criteria of the assessment. Program has passed data 
collecting setting  starting location end location. Though able to collect 
most of the data and able to set up the A* algorithm I only seem to get a 
Infinite loop of the current node. The Program itself seems promising. 
I canâ€™t seem to clear this issue with the remaining time til the due date is met. 

A* Algorithm Gets user Starting point end point and the grid itself.Sets the Manhattan 
distance for all the node in the grid from there point to the end. Set the starting 
node to the current and add the current node to the open list.  
Checks the open list for the lowest F and set that to the new current node and privose 
current node will be sent to the closed list. Gathers the adjacent nodes of the current 
node and adds them to the open list. This only occurs if the node is not already in the 
open list or if it not a wall. If there is a similar node in the list check for the lowest 
G and set that to the current parent. This loops until the end point is in the closed list. 
The shortest path will track back by following back the parents of the nodes from the end point 
to the start. That's the base of the algorithm  





import math 
from math import *
class Node(object):
	#What a node is defined as 
	def __init__(self,x = 0, y=0, index = 0):		
		self.x = x
		self.y = y
		self.Index = index
		self.parent = None
		self.walk = True
		self.G = 0
		self.H = 0
		self.F = self.G + self.H
		
	'''def setF(self):
		self.F = self.G + self.H
	def getH(self):
		tempNode = Node()
		count = 0
	def getG(self, c_grid):
		for n in c_grid:
			++count'''
		
		
	#nl.sort(key lambda x: x: x.f)
class AStar(object):
	#AStar Constructer 
	def __init__(self,Start, End, searchSpace):
		self.Openl = []
		self.closeL = []		
		self.searchSpace = searchSpace
		self.Start = Start
		self.End = End 
		self.currentNode = self.Start
		self.pathDone = False
		
		
	#Checks for walkable Nodes 
	def unWalkable(self):
		for n in self.searchSpace:	#broke!!!!!!!!!!!!!!!!!!!!
			if n.x == 0 or n.x == sqrt(len(self.searchSpace)) - 1:
				n.walk = False
			if n.y == 0 or n.y == sqrt(len(self.searchSpace)) - 1:
				n.walk = False
			else:
				n.walk =  True
	def AddStartingNode(self):
		self.Openl.append(self.Start)
	
	def LowestF(self):
		lowestF = -1 
		nodeWithLowestF = None
		for n in self.Openl:
			if n.F > lowestF:
				lowestF =  n.F
				nodeWithLowestF = n 
		self.closeL.append(self.currentNode)		
		self.currentNode = nodeWithLowestF
				
	# Places current nodes adjacents in the Open List
	#aslong as its walkable or not already in the Open List  			
	def adj(self):
  		adjHolder = []
		rowL = 10
		
		adjHolder.append(self.currentNode.Index - rowL)
		adjHolder.append(self.currentNode.Index + rowL)
		adjHolder.append(self.currentNode.Index + 1)
		adjHolder.append(self.currentNode.Index - 1)
		adjHolder.append(self.currentNode.Index + rowL + 1)
 		adjHolder.append(self.currentNode.Index + rowL - 1)
 		adjHolder.append(self.currentNode.Index - rowL + 1)
 		adjHolder.append(self.currentNode.Index - rowL - 1)
		
		for ah in adjHolder:
			if ah >= 0 and ah < 100:
				if self.searchSpace[ah].walk:
					if self.searchSpace[ah] not in self.Openl:
						self.searchSpace[ah].parent = self.currentNode
						self.Openl.append(self.searchSpace[ah])
						
					else:
						betterPath = self.Openl.index(self.searchSpace[ah])
						if self.searchSpace[ah].G < self.Openl[betterPath].G:
							self.Openl[betterPath] = self.searchSpace[ah]
							

				else:	
					print "No new added to Open List"
					print str(self.searchSpace[ah].walk) + " " + str(self.searchSpace[ah].Index)
			
		ph = set(adjHolder)
		ol = set(self.Openl)
		
		'''for ah in adjHolder:
			#if not ah.walk or [i for i in adjHolder if not i in self.Openl]:
				if ah != None:
					#print str(ah.x) + "," + str(ah.y) + " = " + str(ah.Index)
					ah.parent = self.currentNode
					self.Openl.append(ah)'''
 	
	#Sets the adjacent Nodes G Coast 	
	def adjGcost(self):
		for ol in self.Openl:
			if abs(ol.Index - self.currentNode.Index)  == 11 or abs(ol.Index - self.currentNode.Index) == 9 :
				ol.G = 14
			else:
				ol.G = 10
			
	
	'''def closeL(self):
		self.closeL.append(currentNode)'''
		
	
	#Uses the Manhattan Formula to set the H for the nodes in the Search Space
	def ManhattanDis(self):
		for n in self.searchSpace:
			n.H = 10*(abs(n.x - self.End.x) + abs(n.y - self.End.y))
			
			
	#Tra 
	def ReachedGoel(self):
		if self.End in self.closeL:
			self.pathDone = False
		
			
	def PrintInfo(self):
		#for n in self.Openl:
		#print(self.currentNode.Index)
		print self.currentNode.Index 
	